'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  BarChart3, 
  CheckCircle, 
  XCircle, 
  Download, 
  Share2, 
  AlertTriangle, 
  FileText, 
  ChevronRight, 
  Search, 
  ArrowLeft,
  MoveLeft,
  Maximize2,
  Sparkles,
  Zap,
  RefreshCw,
  Shield,
  MousePointerClick,
  X
} from 'lucide-react';
import Layout from '@/components/Layout';
import Image from 'next/image';

// Define platform data with logos and descriptions
const platforms = [
  {
    id: 'instagram',
    name: 'Instagram',
    description: 'Terms of Service and Privacy Policy',
    icon: '/images/platforms/instagram.svg',
    pdfPath: '/Tnc/Instagram_TnC.pdf',
    color: '#E1306C',
    bgColor: '#FCEEF3'
  },
  {
    id: 'linkedin',
    name: 'LinkedIn',
    description: 'User Agreement and Privacy Policy',
    icon: '/images/platforms/linkedin.svg',
    pdfPath: '/Tnc/Linkedin_TnC.pdf',
    color: '#0A66C2',
    bgColor: '#E8F1FA'
  },
  {
    id: 'meta',
    name: 'Meta',
    description: 'Terms of Service and Data Policy',
    icon: '/images/platforms/meta.svg',
    pdfPath: '/Tnc/Meta_TnC.pdf',
    color: '#0668E1',
    bgColor: '#E5F0FD'
  },
  {
    id: 'openai',
    name: 'OpenAI',
    description: 'Terms of Use and Privacy Policy',
    icon: '/images/platforms/openai.svg',
    pdfPath: '/Tnc/OpenAI_TnC.pdf',
    color: '#10A37F',
    bgColor: '#E7F6F2'
  },
  {
    id: 'pinterest',
    name: 'Pinterest',
    description: 'Terms of Service and Privacy Policy',
    icon: '/images/platforms/pinterest.svg',
    pdfPath: '/Tnc/Pinterest_TnC.pdf',
    color: '#E60023',
    bgColor: '#FDECEE'
  },
  {
    id: 'reddit',
    name: 'Reddit',
    description: 'User Agreement and Privacy Policy',
    icon: '/images/platforms/reddit.svg',
    pdfPath: '/Tnc/Reddit_TnC.pdf',
    color: '#FF4500',
    bgColor: '#FFEFE9'
  },
  {
    id: 'snapchat',
    name: 'Snapchat',
    description: 'Terms of Service and Privacy Policy',
    icon: '/images/platforms/snapchat.svg',
    pdfPath: '/Tnc/Snapchat_TnC.pdf',
    color: '#FFFC00',
    bgColor: '#FFFDE5'
  },
  {
    id: 'telegram',
    name: 'Telegram',
    description: 'Terms of Service and Privacy Policy',
    icon: '/images/platforms/telegram.svg',
    pdfPath: '/Tnc/Telegram_TnC.pdf',
    color: '#26A5E4',
    bgColor: '#EAF6FC'
  },
  {
    id: 'whatsapp',
    name: 'WhatsApp',
    description: 'Terms of Service and Privacy Notice',
    icon: '/images/platforms/whatsapp.svg',
    pdfPath: '/Tnc/Whatsapp_TnC.pdf',
    color: '#25D366',
    bgColor: '#EAFAF1'
  },
  {
    id: 'twitter',
    name: 'X (Twitter)',
    description: 'Terms of Service and Privacy Policy',
    icon: '/images/platforms/x.svg',
    pdfPath: '/Tnc/X_TnC.pdf',
    color: '#000000',
    bgColor: '#F0F0F0'
  },
  {
    id: 'youtube',
    name: 'YouTube',
    description: 'Terms of Service and Privacy Policy',
    icon: '/images/platforms/youtube.svg',
    pdfPath: '/Tnc/Youtube_TnC.pdf',
    color: '#FF0000',
    bgColor: '#FEE6E6'
  }
];

// Gemini API integration
const GEMINI_API_KEY = 'AIzaSyBjCBj-TtFmbfuOCgVQ9Fy3I4JN4nxWd_0';

interface AnalysisResult {
  summary: string;
  flowchart: {
    id: number;
    title: string;
    description: string;
    type: string;
  }[];
  risks: {
    title: string;
    level: string;
    description: string;
  }[];
  dos: string[];
  donts: string[];
}

async function analyzePdfWithGemini(pdfUrl: string, platformName: string): Promise<AnalysisResult | null> {
  try {
    const prompt = `Analyze the Terms & Conditions for ${platformName} and provide a structured analysis with the following sections:
    1. A short summary of the document (max 50 words)
    2. A flowchart of key points in the document (at least 6 points)
    3. Risk assessment (at least 4 risks with levels: High, Medium, or Low)
    4. A list of do's (5 items)
    5. A list of don'ts (5 items)
    
    Format the response as JSON with these keys: summary, flowchart (array of objects with id, title, description, type where type is one of: requirement, right, warning, limitation, info), risks (array of objects with title, level, description), dos (array of strings), donts (array of strings).`;

    // In a real implementation, you would extract text from the PDF and send it to Gemini
    // This is a simulation that returns the predefined data for now
    
    // Simulating an API call to Gemini
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Return sample data for demo purposes
    return {
      summary: `${platformName}'s terms outline user rights, content ownership, data collection practices, and community guidelines with important privacy implications.`,
      flowchart: [
        { id: 1, title: "Account Creation", description: `You must be 13+ years old to create a ${platformName} account`, type: "requirement" },
        { id: 2, title: "Content Ownership", description: "You retain rights to your content but grant a license to the platform", type: "right" },
        { id: 3, title: "Data Collection", description: `${platformName} collects personal data, device information, and usage patterns`, type: "warning" },
        { id: 4, title: "Content Moderation", description: "Platform can remove content that violates guidelines", type: "limitation" },
        { id: 5, title: "Account Termination", description: "Platform can suspend accounts for violations", type: "warning" },
        { id: 6, title: "Third-Party Services", description: `${platformName} integrates with third-party services that may collect data`, type: "info" }
      ],
      risks: [
        { title: "Data Privacy", level: "High", description: "Your personal data may be used for targeted advertising" },
        { title: "Content Rights", level: "Medium", description: `${platformName} gains non-exclusive license to your content` },
        { title: "Account Control", level: "Medium", description: "Platform can terminate accounts at their discretion" },
        { title: "Data Retention", level: "Low", description: "Data may be stored even after account deletion" }
      ],
      dos: [
        "Read privacy settings carefully and adjust accordingly",
        "Keep personal information private when possible",
        "Report inappropriate content or behavior",
        "Use strong, unique passwords for your account",
        "Review third-party app permissions regularly"
      ],
      donts: [
        "Don't share sensitive personal information publicly",
        "Don't post content that violates community guidelines",
        "Don't create fake accounts or impersonate others",
        "Don't engage in harassment or bullying",
        "Don't use the platform for illegal activities"
      ]
    };

  } catch (error) {
    console.error("Error analyzing PDF with Gemini:", error);
    return null;
  }
}

// Full screen PDF viewer component
const FullScreenPdfViewer = ({ url, isOpen, onClose }: { url: string, isOpen: boolean, onClose: () => void }) => {
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 bg-black bg-opacity-80 flex items-center justify-center p-4"
        >
          <motion.div 
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            className="w-full h-full max-w-6xl max-h-[90vh] bg-white rounded-2xl overflow-hidden flex flex-col"
          >
            <div className="flex justify-between items-center p-4 bg-gray-100">
              <h3 className="font-bold text-lg">Terms & Conditions</h3>
              <button 
                onClick={onClose}
                className="p-1 rounded-full hover:bg-gray-200 transition-colors"
              >
                <X className="h-6 w-6" />
              </button>
            </div>
            <div className="flex-1 overflow-hidden">
              <iframe
                src={`${url}#view=FitH&toolbar=0&navpanes=0`}
                className="w-full h-full"
                style={{ border: 'none' }}
              ></iframe>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default function DecypherItPage() {
  const [selectedPlatform, setSelectedPlatform] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [showPdfPreview, setShowPdfPreview] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredPlatforms, setFilteredPlatforms] = useState(platforms);
  const [showFullScreenPdf, setShowFullScreenPdf] = useState(false);
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult | null>(null);
  const [highlightedRisk, setHighlightedRisk] = useState<number | null>(null);
  const [activeTab, setActiveTab] = useState('risks');

  // Find the selected platform data
  const selectedPlatformData = platforms.find(p => p.id === selectedPlatform);

  // Filter platforms based on search query
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredPlatforms(platforms);
    } else {
      const filtered = platforms.filter(platform => 
        platform.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        platform.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredPlatforms(filtered);
    }
  }, [searchQuery]);

  const handlePlatformSelect = async (platform: string) => {
    setSelectedPlatform(platform);
    setShowPdfPreview(true);
  };

  const handleAnalyzeDocument = async () => {
    if (!selectedPlatformData) return;
    
    setShowPdfPreview(false);
    setIsProcessing(true);
    
    try {
      // Call Gemini API
      const results = await analyzePdfWithGemini(
        selectedPlatformData.pdfPath,
        selectedPlatformData.name
      );
      
      setAnalysisResults(results);
      setIsProcessing(false);
      setShowResults(true);
    } catch (error) {
      console.error("Error analyzing document:", error);
      setIsProcessing(false);
      // Handle error
    }
  };

  const handleReset = () => {
    setSelectedPlatform(null);
    setShowPdfPreview(false);
    setShowResults(false);
    setSearchQuery('');
    setFilteredPlatforms(platforms);
  };

  // Example results - in a real app this would come from the Gemini API
  const results = {
    summary: "This document outlines the terms of service and privacy policy for users. It covers user rights, content ownership, data collection practices, and community guidelines.",
    flowchart: [
      { id: 1, title: "Account Creation", description: "You must be 13+ years old to create an account", type: "requirement" },
      { id: 2, title: "Content Ownership", description: "You retain rights to your content but grant a license to the platform", type: "right" },
      { id: 3, title: "Data Collection", description: "Platform collects personal data, device information, and usage patterns", type: "warning" },
      { id: 4, title: "Content Moderation", description: "Platform can remove content that violates guidelines", type: "limitation" },
      { id: 5, title: "Account Termination", description: "Platform can suspend accounts for violations", type: "warning" },
      { id: 6, title: "Third-Party Services", description: "Platform integrates with third-party services that may collect data", type: "info" }
    ],
    risks: [
      { title: "Data Privacy", level: "High", description: "Your personal data may be used for targeted advertising" },
      { title: "Content Rights", level: "Medium", description: "Platform gains non-exclusive license to your content" },
      { title: "Account Control", level: "Medium", description: "Platform can terminate accounts at their discretion" },
      { title: "Data Retention", level: "Low", description: "Data may be stored even after account deletion" }
    ],
    dos: [
      "Read privacy settings carefully and adjust accordingly",
      "Keep personal information private when possible",
      "Report inappropriate content or behavior",
      "Use strong, unique passwords for your account",
      "Review third-party app permissions regularly"
    ],
    donts: [
      "Don't share sensitive personal information publicly",
      "Don't post content that violates community guidelines",
      "Don't create fake accounts or impersonate others",
      "Don't engage in harassment or bullying",
      "Don't use the platform for illegal activities"
    ]
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-b from-[#F9F8FF] to-[#F2F0FF] pt-16 pb-12">
        {/* Background decorative elements */}
        <div className="fixed inset-0 -z-10 pointer-events-none overflow-hidden">
          <div className="absolute bottom-0 left-0 right-0 h-[60%] bg-gradient-to-t from-[#F2F0FF] via-transparent to-transparent"></div>
        </div>
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-8">
          {/* Header */}
          {!showPdfPreview && !showResults && (
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="text-center mb-12 pt-12"
            >
              <h1 className="text-4xl md:text-5xl font-bold text-[#6B57E6] font-poppins mb-4">
                Decypher <span className="text-[#8C7FF8]">It</span>
              </h1>
              <p className="text-xl text-gray-700 max-w-3xl mx-auto">
                Select from our collection of Terms & Conditions to see Decypher in action. 
                Get instant flowcharts, summaries, and actionable insights.
              </p>

              {/* Search Bar */}
              <motion.div 
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.3 }}
                className="max-w-md mx-auto mt-8 relative"
              >
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <motion.input
                    whileFocus={{ scale: 1.02, boxShadow: '0 4px 20px rgba(140, 127, 248, 0.15)' }}
                    transition={{ duration: 0.3 }}
                    type="text"
                    placeholder="Search platforms..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 rounded-xl border-2 border-gray-200 focus:border-[#8C7FF8] focus:outline-none focus:ring-2 focus:ring-[#8C7FF8]/20 transition-all duration-300"
                  />
                </div>
              </motion.div>
            </motion.div>
          )}

          {/* Back Button for PDF Preview and Results */}
          {(showPdfPreview || showResults) && (
            <motion.button
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              onClick={() => showResults ? handleReset() : setShowPdfPreview(false)}
              className="flex items-center space-x-2 text-[#6B57E6] font-medium mt-8 hover:text-[#5A48D3] transition-colors duration-300"
            >
              <ArrowLeft className="h-5 w-5" />
              <span>{showResults ? "Start Over" : "Back to Platforms"}</span>
            </motion.button>
          )}

          {/* PDF Preview */}
          <AnimatePresence>
            {showPdfPreview && selectedPlatformData && (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.95 }}
                transition={{ duration: 0.5 }}
                className="my-8"
              >
                <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
                  {/* Platform Header */}
                  <div 
                    className="p-6 flex items-center space-x-4" 
                    style={{ backgroundColor: selectedPlatformData.bgColor }}
                  >
                    <motion.div 
                      whileHover={{ scale: 1.05, rotate: 5 }}
                      transition={{ type: "spring", stiffness: 400, damping: 10 }}
                      className="h-16 w-16 flex items-center justify-center rounded-full"
                      style={{ backgroundColor: 'white', boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}
                    >
                      <Image 
                        src={selectedPlatformData.icon || `/images/platforms/${selectedPlatformData.id}.svg`} 
                        alt={selectedPlatformData.name}
                        width={32}
                        height={32}
                        className="h-8 w-8 object-contain"
                      />
                    </motion.div>
                    <div>
                      <h2 className="text-2xl font-bold" style={{ color: selectedPlatformData.color }}>
                        {selectedPlatformData.name}
                      </h2>
                      <p className="text-gray-600">{selectedPlatformData.description}</p>
                    </div>
                    <div className="ml-auto">
                      <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setShowFullScreenPdf(true)}
                        className="flex items-center space-x-2 px-4 py-2 rounded-lg text-gray-700 hover:bg-white/50 transition-colors"
                      >
                        <Maximize2 className="h-5 w-5" />
                        <span className="hidden sm:inline">Full Screen</span>
                      </motion.button>
                    </div>
                  </div>
                  
                  {/* PDF Viewer */}
                  <div className="relative bg-gray-100">
                    <div className="h-[600px] overflow-auto">
                      <iframe
                        src={`${selectedPlatformData.pdfPath}#view=FitH&toolbar=0&navpanes=1`}
                        className="w-full h-full"
                        style={{ border: 'none' }}
                      ></iframe>
                    </div>
                    
                    {/* Overlay with analyze button */}
                    <div className="absolute inset-0 flex flex-col items-center justify-end p-8 bg-gradient-to-t from-gray-900/70 to-transparent">
                      <p className="text-white text-lg mb-4 text-center max-w-md">
                        Ready to analyze this document and get insights?
                      </p>
                      <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={handleAnalyzeDocument}
                        className="bg-[#8C7FF8] hover:bg-[#6B57E6] text-white px-8 py-4 rounded-xl font-bold text-lg transition-colors duration-300 flex items-center space-x-3 shadow-lg"
                      >
                        <FileText className="h-5 w-5" />
                        <span>Analyze Document</span>
                        <ChevronRight className="h-5 w-5" />
                      </motion.button>
                    </div>
                  </div>
                </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Platform Grid */}
          <AnimatePresence>
            {!showPdfPreview && !showResults && (
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.6, delay: 0.2 }}
                className="mb-12"
              >
                {filteredPlatforms.length === 0 ? (
                  <div className="text-center py-16 bg-white rounded-2xl shadow-sm">
                    <FileText className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                    <h3 className="text-xl font-medium text-gray-700">No platforms match your search</h3>
                    <p className="text-gray-500 mt-2">Try another search term</p>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    {filteredPlatforms.map((platform, index) => (
                      <motion.button
                        key={platform.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5, delay: 0.1 + index * 0.05 }}
                        whileHover={{ y: -5, boxShadow: '0 10px 25px rgba(140, 127, 248, 0.15)' }}
                        onClick={() => handlePlatformSelect(platform.id)}
                        className="bg-white p-6 rounded-2xl shadow-sm hover:shadow-md transition-all duration-300 text-left flex flex-col h-full border border-gray-100"
                      >
                        <div className="flex items-center mb-4">
                          <div 
                            className="h-12 w-12 rounded-full flex items-center justify-center mr-4"
                            style={{ backgroundColor: platform.bgColor || '#F2F0FF' }}
                          >
                            <Image
                              src={platform.icon || `/images/platforms/${platform.id}.svg`}
                              alt={platform.name}
                              width={24}
                              height={24}
                              className="h-6 w-6 object-contain"
                            />
                          </div>
                          <div className="flex-1">
                            <h3 className="font-bold text-gray-800">{platform.name}</h3>
                            <p className="text-sm text-gray-500">{platform.description}</p>
                          </div>
                        </div>
                        <div className="mt-auto pt-4 flex justify-end">
                          <div className="flex items-center text-[#8C7FF8] font-medium text-sm">
                            <span>View Document</span>
                            <ChevronRight className="h-4 w-4 ml-1" />
                          </div>
                        </div>
                      </motion.button>
                    ))}
                  </div>
                )}
              </motion.div>
            )}
          </AnimatePresence>

          {/* Processing State */}
          <AnimatePresence>
            {isProcessing && (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.5 }}
                className="py-16 flex justify-center"
              >
                <div className="bg-white rounded-2xl p-8 shadow-lg max-w-md w-full text-center">
                  <div className="relative mx-auto mb-6 w-24 h-24">
                    <div className="absolute inset-0 rounded-full border-4 border-[#F2F0FF]"></div>
                    <div className="absolute inset-0 rounded-full border-4 border-t-[#8C7FF8] animate-spin"></div>
                    <div className="absolute inset-2 rounded-full bg-white flex items-center justify-center">
                      <FileText className="h-8 w-8 text-[#8C7FF8]" />
                    </div>
                  </div>
                  <h3 className="text-xl font-bold text-gray-800 mb-3">
                    AI is Processing...
                  </h3>
                  <div className="space-y-4 max-w-xs mx-auto">
                    <p className="text-gray-600">
                      Our AI is analyzing the document to extract key information and insights
                    </p>
                    <div className="w-full bg-gray-100 rounded-full h-1.5">
                      <motion.div 
                        initial={{ width: "0%" }}
                        animate={{ width: "100%" }}
                        transition={{ duration: 3 }}
                        className="bg-[#8C7FF8] h-1.5 rounded-full"
                      ></motion.div>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Results */}
          <AnimatePresence>
            {showResults && selectedPlatformData && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.6 }}
                className="space-y-8 mb-12"
              >
                {/* Results Header */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6 }}
                  className="bg-white rounded-2xl shadow-lg p-8"
                >
                  <div className="flex flex-col md:flex-row md:items-center gap-6">
                    <motion.div 
                      initial={{ scale: 0.8, rotate: -5 }}
                      animate={{ scale: 1, rotate: 0 }}
                      transition={{ type: "spring", stiffness: 300, damping: 15 }}
                      className="h-16 w-16 flex-shrink-0 rounded-xl flex items-center justify-center"
                      style={{ backgroundColor: selectedPlatformData.bgColor }}
                    >
                      <Image 
                        src={selectedPlatformData.icon} 
                        alt={selectedPlatformData.name}
                        width={32}
                        height={32}
                        className="h-8 w-8 object-contain"
                      />
                    </motion.div>
                    <div className="flex-1">
                      <h2 className="text-2xl font-bold text-gray-800 mb-1">
                        {selectedPlatformData.name} - Analysis Results
                      </h2>
                      <p className="text-gray-600">{analysisResults?.summary || results.summary}</p>
                    </div>
                    <div className="flex flex-col sm:flex-row gap-3">
                      <motion.button 
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        className="bg-[#8C7FF8] hover:bg-[#6B57E6] text-white px-6 py-3 rounded-lg font-medium transition-colors duration-300 flex items-center justify-center space-x-2 shadow-sm"
                      >
                        <Download className="h-4 w-4" />
                        <span>Export PDF</span>
                      </motion.button>
                      <motion.button 
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        className="border-2 border-[#8C7FF8] text-[#8C7FF8] hover:bg-[#F2F0FF] px-6 py-3 rounded-lg font-medium transition-colors duration-300 flex items-center justify-center space-x-2"
                      >
                        <Share2 className="h-4 w-4" />
                        <span>Share</span>
                      </motion.button>
                    </div>
                  </div>
                  
                  {/* Tab Navigation */}
                  <div className="mt-8 border-b border-gray-200">
                    <div className="flex space-x-8">
                      {['risks', 'flowchart', 'guidelines'].map((tab) => (
                        <motion.button
                          key={tab}
                          onClick={() => setActiveTab(tab)}
                          className={`pb-2 font-medium text-sm transition-colors duration-200 ${
                            activeTab === tab ? 'text-[#6B57E6] border-b-2 border-[#6B57E6]' : 'text-gray-500 hover:text-gray-700'
                          }`}
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          {tab === 'risks' && 'Risk Assessment'}
                          {tab === 'flowchart' && 'Document Flowchart'}
                          {tab === 'guidelines' && "Do's & Don'ts"}
                        </motion.button>
                      ))}
                    </div>
                  </div>
                </motion.div>

                {/* Risk Assessment */}
                {activeTab === 'risks' && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: 0.1 }}
                    className="bg-white rounded-2xl p-8 shadow-lg mt-6"
                  >
                    <div className="flex items-center mb-6">
                      <AlertTriangle className="h-6 w-6 text-amber-500 mr-3" />
                      <h3 className="text-2xl font-bold text-gray-800">Risk Assessment</h3>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {(analysisResults?.risks || results.risks).map((risk, index) => (
                        <motion.div
                          key={index}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.4, delay: 0.2 + index * 0.1 }}
                          whileHover={{ 
                            scale: 1.02,
                            boxShadow: '0 8px 30px rgba(0, 0, 0, 0.06)'
                          }}
                          className="bg-white border border-gray-100 rounded-xl p-5 shadow-sm transition-all duration-300"
                        >
                          <div className="flex justify-between items-start mb-2">
                            <h4 className="font-semibold text-gray-800">{risk.title}</h4>
                            <span className={`
                              px-3 py-1 text-xs font-medium rounded-full
                              ${risk.level === 'High' ? 'bg-red-100 text-red-600' :
                                risk.level === 'Medium' ? 'bg-amber-100 text-amber-600' :
                                'bg-green-100 text-green-600'}
                            `}>
                              {risk.level} Risk
                            </span>
                          </div>
                          <p className="text-gray-600 text-sm">{risk.description}</p>
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>
                )}

                {/* Flowchart */}
                {activeTab === 'flowchart' && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: 0.2 }}
                    className="bg-white rounded-2xl p-8 shadow-lg mt-6"
                  >
                    <div className="flex items-center mb-6">
                      <BarChart3 className="h-6 w-6 text-[#8C7FF8] mr-3" />
                      <h3 className="text-2xl font-bold text-gray-800">Document Flowchart</h3>
                    </div>
                    
                    {/* Visual flowchart with connecting lines */}
                    <div className="relative">
                      <div className="hidden md:block absolute top-1/2 left-0 w-full h-1 bg-gray-200 -translate-y-1/2 z-0"></div>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 relative z-10">
                        {(analysisResults?.flowchart || results.flowchart).map((item, index) => (
                          <motion.div
                            key={item.id}
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.4, delay: 0.3 + index * 0.1 }}
                            whileHover={{ 
                              y: -5,
                              boxShadow: '0 10px 25px rgba(0, 0, 0, 0.05)',
                            }}
                            className={`
                              p-5 rounded-xl border-l-4 flex flex-col relative
                              ${item.type === 'requirement' ? 'border-blue-400 bg-blue-50/50' :
                                item.type === 'right' ? 'border-green-400 bg-green-50/50' :
                                item.type === 'warning' ? 'border-amber-400 bg-amber-50/50' :
                                item.type === 'info' ? 'border-purple-400 bg-purple-50/50' :
                                'border-red-400 bg-red-50/50'
                              }
                            `}
                          >
                            {/* Numbered circle on top */}
                            <motion.div 
                              className={`
                                absolute -top-3 left-4 w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold text-white
                                ${item.type === 'requirement' ? 'bg-blue-500' :
                                  item.type === 'right' ? 'bg-green-500' :
                                  item.type === 'warning' ? 'bg-amber-500' :
                                  item.type === 'info' ? 'bg-purple-500' :
                                  'bg-red-500'
                                }
                              `}
                              whileHover={{ scale: 1.2 }}
                            >
                              {item.id}
                            </motion.div>
                            
                            <h4 className="font-semibold text-gray-800 mt-2 mb-2">
                              {item.title}
                            </h4>
                            <p className="text-sm text-gray-600">
                              {item.description}
                            </p>
                            
                            {/* Small icon at bottom */}
                            <div className="mt-auto pt-3 flex justify-end">
                              <div className={`
                                text-xs font-medium
                                ${item.type === 'requirement' ? 'text-blue-600' :
                                  item.type === 'right' ? 'text-green-600' :
                                  item.type === 'warning' ? 'text-amber-600' :
                                  item.type === 'info' ? 'text-purple-600' :
                                  'text-red-600'
                                }
                              `}>
                                {item.type.charAt(0).toUpperCase() + item.type.slice(1)}
                              </div>
                            </div>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  </motion.div>
                )}

                {/* Dos and Don'ts */}
                {activeTab === 'guidelines' && (
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
                    {/* Dos */}
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.5, delay: 0.3 }}
                      className="bg-white rounded-2xl p-8 shadow-lg"
                    >
                      <div className="flex items-center mb-6">
                        <CheckCircle className="h-6 w-6 text-green-500 mr-3" />
                        <h3 className="text-2xl font-bold text-gray-800">Do&apos;s</h3>
                      </div>
                      <ul className="space-y-4">
                        {(analysisResults?.dos || results.dos).map((item, index) => (
                          <motion.li
                            key={index}
                            initial={{ opacity: 0, x: -10 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ duration: 0.4, delay: 0.4 + index * 0.1 }}
                            whileHover={{ x: 5 }}
                            className="flex items-start"
                          >
                            <div className="bg-green-100 rounded-full p-1 mr-3 mt-0.5">
                              <CheckCircle className="h-4 w-4 text-green-500" />
                            </div>
                            <span className="text-gray-700">{item}</span>
                          </motion.li>
                        ))}
                      </ul>
                    </motion.div>

                    {/* Don'ts */}
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.5, delay: 0.4 }}
                      className="bg-white rounded-2xl p-8 shadow-lg"
                    >
                      <div className="flex items-center mb-6">
                        <XCircle className="h-6 w-6 text-red-500 mr-3" />
                        <h3 className="text-2xl font-bold text-gray-800">Don&apos;ts</h3>
                      </div>
                      <ul className="space-y-4">
                        {(analysisResults?.donts || results.donts).map((item, index) => (
                          <motion.li
                            key={index}
                            initial={{ opacity: 0, x: -10 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ duration: 0.4, delay: 0.5 + index * 0.1 }}
                            whileHover={{ x: 5 }}
                            className="flex items-start"
                          >
                            <div className="bg-red-100 rounded-full p-1 mr-3 mt-0.5">
                              <XCircle className="h-4 w-4 text-red-500" />
                            </div>
                            <span className="text-gray-700">{item}</span>
                          </motion.li>
                        ))}
                      </ul>
                    </motion.div>
                  </div>
                )}

                {/* Try Another Document Button */}
                <div className="text-center mt-12">
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleReset}
                    className="bg-[#F2F0FF] hover:bg-[#E4E0FF] text-[#6B57E6] px-8 py-3 rounded-lg font-semibold transition-colors duration-300 inline-flex items-center"
                  >
                    <MoveLeft className="h-4 w-4 mr-2" />
                    Try Another Document
                  </motion.button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </Layout>
  );
}

